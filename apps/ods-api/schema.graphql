# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type QuestionGQL {
  id: String!
  prompt: String!
}

type AnswerGQL {
  question: QuestionGQL
  id: String!
  value: String!
  questionId: String!
  surveyResponseId: String!
}

type OrgGQL {
  orgTier: OrgTier!
  id: String!
  name: String!
  parentId: String
}

enum OrgTier {
  WING
  GROUP
  SQUADRON
  OTHER
}

type SurveyGQL {
  id: String!
}

type SurveyResponseGQL {
  id: String!
  surveyId: String!
  openedDate: DateTime!
  closedDate: DateTime
  routeOutside: Boolean!
  resolution: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input QuestionGQLInput {
  id: String!
  prompt: String!
}

input AnswerGQLInput {
  question: QuestionGQLInput
  id: String!
  value: String!
  questionId: String!
  surveyResponseId: String!
}

input OrgGQLInput {
  orgTier: OrgTier!
  id: String!
  name: String!
  parentId: String
}

input SurveyGQLInput {
  id: String!
}

input SurveyResponseGQLInput {
  id: String!
  surveyId: String!
  openedDate: DateTime!
  closedDate: DateTime
  routeOutside: Boolean!
  resolution: String
}

type Query {
  findManySurveys(where: SurveyWhereInput): [SurveyGQL!]!
  findUniqueSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  findManySurveyResponses(where: SurveyResponseWhereInput): [SurveyResponseGQL!]!
  findUniqueSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  getIssuesByStatus(resolved: Boolean!): [String!]!
  getSurveyResponseData(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  findManyAnswers(where: AnswerWhereInput): [AnswerGQL!]!
  findUniqueAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): AnswerGQL!
  findManyOrgs(where: OrgWhereInput): [OrgGQL!]!
  getSubOrgs(orgWhereUniqueInput: OrgWhereUniqueInput!): [OrgGQL!]!
  findUniqueOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  findManyQuestions(where: QuestionWhereInput): [QuestionGQL!]!
  getSubQuestions(surveyWhereUniqueInput: SurveyWhereUniqueInput!): [QuestionGQL!]!
  findUniqueQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): QuestionGQL!
}

input SurveyWhereInput {
  id: String
  orgs: OrgListRelationFilter
  questions: QuestionListRelationFilter
  surveyResponses: SurveyResponseListRelationFilter
}

input OrgListRelationFilter {
  every: OrgWhereInput
  some: OrgWhereInput
  none: OrgWhereInput
}

input OrgWhereInput {
  id: String
  name: String
  orgTier: OrgTier
  users: UserListRelationFilter
  parent: OrgRelationFilter
  children: SurveyListRelationFilter
  surveys: SurveyListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserWhereInput {
  id: String
  email: String
  roles: Role
  orgs: OrgListRelationFilter
  enabled: Boolean
}

enum Role {
  ADMIN
  DEI
  EO
  CC
}

input OrgRelationFilter {
  is: OrgWhereInput
  isNot: OrgWhereInput
}

input SurveyListRelationFilter {
  every: SurveyWhereInput
  some: SurveyWhereInput
  none: SurveyWhereInput
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input QuestionWhereInput {
  id: String
  surveys: SurveyListRelationFilter
  answers: AnswerListRelationFilter
  prompt: String
}

input AnswerListRelationFilter {
  every: AnswerWhereInput
  some: AnswerWhereInput
  none: AnswerWhereInput
}

input AnswerWhereInput {
  id: String
  value: StringFilter
  question: QuestionRelationFilter
  surveyResponse: SurveyResponseRelationFilter
}

input StringFilter {
  not: StringFilter
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input QuestionRelationFilter {
  is: QuestionWhereInput
  isNot: QuestionWhereInput
}

input SurveyResponseRelationFilter {
  is: SurveyResponseWhereInput
  isNot: SurveyResponseWhereInput
}

input SurveyResponseWhereInput {
  id: String
  survey: SurveyWhereInput
  openedDate: DateTimeFilter
  closedDate: DateTimeNullableFilter
  answers: AnswerListRelationFilter
  resolution: StringNullableFilter
  routeOutside: Boolean
}

input DateTimeFilter {
  not: DateTimeFilter
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input DateTimeNullableFilter {
  not: DateTimeNullableFilter
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input StringNullableFilter {
  not: StringFilter
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input SurveyResponseListRelationFilter {
  every: SurveyResponseWhereInput
  some: SurveyResponseWhereInput
  none: SurveyResponseWhereInput
}

input SurveyWhereUniqueInput {
  id: String
}

input SurveyResponseWhereUniqueInput {
  id: String
}

input AnswerWhereUniqueInput {
  id: String
}

input OrgWhereUniqueInput {
  id: String
  name: String
}

input QuestionWhereUniqueInput {
  id: String
}

type Mutation {
  createSurvey(surveyCreateInput: SurveyCreateInput!): SurveyGQL!
  updateSurvey(SurveyWhereUniqueInput: SurveyWhereUniqueInput!, SurveyUpdateInput: SurveyUpdateInput!): SurveyGQL!
  deleteSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  createSurveyResponse(surveyResponseCreateInput: SurveyResponseCreateInput!): SurveyResponseGQL!
  updateSurveyResponse(SurveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!, SurveyResponseUpdateInput: SurveyResponseUpdateInput!): SurveyResponseGQL!
  deleteSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  createAnswer(answerCreateInput: AnswerCreateInput!): AnswerGQL!
  updateAnswer(AnswerWhereUniqueInput: AnswerWhereUniqueInput!, AnswerUpdateInput: AnswerUpdateInput!): AnswerGQL!
  deleteAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): AnswerGQL!
  createOrg(orgCreateInput: OrgCreateInput!): OrgGQL!
  updateOrg(OrgWhereUniqueInput: OrgWhereUniqueInput!, OrgUpdateInput: OrgUpdateInput!): OrgGQL!
  deleteOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  createQuestion(questionCreateInput: QuestionCreateInput!): QuestionGQL!
  updateQuestion(QuestionWhereUniqueInput: QuestionWhereUniqueInput!, QuestionUpdateInput: QuestionUpdateInput!): QuestionGQL!
  deleteQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): QuestionGQL!
}

input SurveyCreateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
}

input OrgCreateNestedManyWithoutSurveysInput {
  connect: OrgWhereUniqueInput
}

input QuestionCreateNestedManyWithoutSurveysInput {
  connect: QuestionWhereUniqueInput
}

input SurveyResponseCreateNestedManyWithoutSurveyInput {
  connect: SurveyResponseWhereUniqueInput
  create: SurveyResponseGQLInput
}

input SurveyUpdateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
}

input SurveyResponseCreateInput {
  survey: SurveyCreateNestedOneWithoutSurveyResponsesInput!
  answers: AnswerCreateNestedManyWithoutSurveyResponseInput
  openedDate: DateTime
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input SurveyCreateNestedOneWithoutSurveyResponsesInput {
  connect: SurveyWhereUniqueInput
}

input AnswerCreateNestedManyWithoutSurveyResponseInput {
  connect: AnswerGQLInput
  create: AnswerGQLInput
}

input SurveyResponseUpdateInput {
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input AnswerCreateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput!
  value: String!
}

input QuestionCreateNestedOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
}

input SurveyResponseCreateNestedOneWithoutAnswersInput {
  connect: SurveyResponseWhereUniqueInput
  create: SurveyResponseGQLInput
}

input AnswerUpdateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput
  value: String
}

input OrgCreateInput {
  orgTier: OrgTier!
  commanders: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String!
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input UserCreateNestedManyWithoutOrgsInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedOneWithoutChildrenInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedManyWithoutParentInput {
  connect: OrgWhereUniqueInput
}

input SurveyCreateNestedManyWithoutOrgsInput {
  connect: SurveyWhereUniqueInput
}

input OrgUpdateInput {
  orgTier: OrgTier
  commanders: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input QuestionCreateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  id: String
  prompt: String!
}

input SurveyCreateNestedManyWithoutQuestionsInput {
  connect: SurveyWhereUniqueInput
}

input QuestionUpdateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  id: String
  prompt: String
}