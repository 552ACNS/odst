# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerGQL {
  id: String!
  value: String!
  question: QuestionGQL!
  surveyResponse: SurveyResponseGQL!
}

type OrgGQL {
  orgTier: OrgTier!
  id: String!
  name: String!
  users: [UserGQL!]!
  children: [OrgGQL!]!
  parent: OrgGQL!
  surveys: [SurveyGQL!]!
}

enum OrgTier {
  WING
  GROUP
  SQUADRON
  OTHER
}

type QuestionGQL {
  id: String!
  prompt: String!
  answers: [AnswerGQL!]!
  surveys: [SurveyGQL!]!
}

type SurveyGQL {
  id: String!
  orgs: [OrgGQL!]!
  questions: [QuestionGQL!]!
  surveyResponses: [SurveyResponseGQL!]!
}

type SurveyResponseGQL {
  id: String!
  openedDate: DateTime!
  closedDate: DateTime
  routeOutside: Boolean!
  resolution: String
  answers: [AnswerGQL!]!
  survey: SurveyGQL!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserGQL {
  roles: Role!
  id: String!
  email: String!
  enabled: Boolean!
  orgs: [OrgGQL!]!
}

enum Role {
  ADMIN
  DEI
  EO
  CC
}

type Query {
  findManySurveys: [SurveyGQL!]!
  findUniqueSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  findManySurveyResponses: [SurveyResponseGQL!]!
  findUniqueSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  getIssuesByStatus(resolved: Boolean!): [String!]!
  getSurveyResponseData(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  findManyAnswers: [AnswerGQL!]!
  findUniqueAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): AnswerGQL!
  findManyOrgs: [OrgGQL!]!
  getSubOrgs(orgWhereUniqueInput: OrgWhereUniqueInput!): [OrgGQL!]!
  findUniqueOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  findManyQuestions: [QuestionGQL!]!
  getSubQuestions(surveyWhereUniqueInput: SurveyWhereUniqueInput!): [QuestionGQL!]!
  findUniqueQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): QuestionGQL!
  findManyUsers: [UserGQL!]!
}

input SurveyWhereUniqueInput {
  id: String
}

input SurveyResponseWhereUniqueInput {
  id: String
}

input AnswerWhereUniqueInput {
  id: String
}

input OrgWhereUniqueInput {
  id: String
  name: String
}

input QuestionWhereUniqueInput {
  id: String
}

type Mutation {
  createSurvey(surveyCreateInput: SurveyCreateInput!): SurveyGQL!
  updateSurvey(SurveyWhereUniqueInput: SurveyWhereUniqueInput!, SurveyUpdateInput: SurveyUpdateInput!): SurveyGQL!
  deleteSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  createSurveyResponse(surveyResponseCreateInput: SurveyResponseCreateInput!): SurveyResponseGQL!
  updateSurveyResponse(SurveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!, SurveyResponseUpdateInput: SurveyResponseUpdateInput!): SurveyResponseGQL!
  deleteSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  createAnswer(answerCreateInput: AnswerCreateInput!): AnswerGQL!
  updateAnswer(AnswerWhereUniqueInput: AnswerWhereUniqueInput!, AnswerUpdateInput: AnswerUpdateInput!): AnswerGQL!
  deleteAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): AnswerGQL!
  createOrg(orgCreateInput: OrgCreateInput!): OrgGQL!
  updateOrg(OrgWhereUniqueInput: OrgWhereUniqueInput!, OrgUpdateInput: OrgUpdateInput!): OrgGQL!
  deleteOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  createQuestion(questionCreateInput: QuestionCreateInput!): QuestionGQL!
  updateQuestion(QuestionWhereUniqueInput: QuestionWhereUniqueInput!, QuestionUpdateInput: QuestionUpdateInput!): QuestionGQL!
  deleteQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): QuestionGQL!
}

input SurveyCreateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
}

input OrgCreateNestedManyWithoutSurveysInput {
  connect: OrgWhereUniqueInput
}

input QuestionCreateNestedManyWithoutSurveysInput {
  connect: QuestionWhereUniqueInput
}

input SurveyResponseCreateNestedManyWithoutSurveyInput {
  connect: SurveyResponseWhereUniqueInput
}

input SurveyUpdateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
}

input SurveyResponseCreateInput {
  survey: SurveyCreateNestedOneWithoutSurveyResponsesInput!
  answers: AnswerCreateNestedManyWithoutSurveyResponseInput
  openedDate: DateTime
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input SurveyCreateNestedOneWithoutSurveyResponsesInput {
  connect: SurveyWhereUniqueInput
}

input AnswerCreateNestedManyWithoutSurveyResponseInput {
  connect: AnswerWhereUniqueInput
  create: AnswerCreateInput
}

input AnswerCreateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput!
  value: String!
}

input QuestionCreateNestedOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
}

input SurveyResponseCreateNestedOneWithoutAnswersInput {
  connect: SurveyResponseWhereUniqueInput
}

input SurveyResponseUpdateInput {
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input AnswerUpdateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput
  value: String
}

input OrgCreateInput {
  orgTier: OrgTier!
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String!
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input UserCreateNestedManyWithoutOrgsInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedOneWithoutChildrenInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedManyWithoutParentInput {
  connect: OrgWhereUniqueInput
}

input SurveyCreateNestedManyWithoutOrgsInput {
  connect: SurveyWhereUniqueInput
}

input OrgUpdateInput {
  orgTier: OrgTier
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input QuestionCreateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String!
}

input SurveyCreateNestedManyWithoutQuestionsInput {
  connect: SurveyWhereUniqueInput
}

input QuestionUpdateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String
}