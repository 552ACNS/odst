# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Org {
  orgTier: OrgTier!
  id: String!
  name: String!
  users: [User!]!
  children: [Org!]!
  parent: Org!
  surveys: [Survey!]!
}

enum OrgTier {
  WING
  GROUP
  SQUADRON
  OTHER
}

type Answer {
  id: String!
  value: String!
  question: Question!
  surveyResponse: SurveyResponse!
}

type Question {
  id: String!
  prompt: String!
  answers: [Answer!]!
  surveys: [Survey!]!
}

type Survey {
  id: String!
  questionsHash: String
  orgs: [Org!]!
  questions: [Question!]!
  surveyResponses: [SurveyResponse!]!
}

type SurveyResponse {
  id: String!
  openedDate: DateTime!
  closedDate: DateTime
  routeOutside: Boolean!
  resolution: String
  answers: [Answer!]!
  survey: Survey!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ResponseCount {
  unresolved: Float!
  overdue: Float!
  resolved: Float!
}

type User {
  role: Role!
  id: String!
  email: String!
  grade: String
  firstName: String!
  lastName: String!
  enabled: Boolean!
  orgs: [Org!]!
}

enum Role {
  ADMIN
  DEI
  EO
  CC
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type Query {
  findManySurveys: [Survey!]!
  findUniqueSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): Survey!
  findManySurveyResponses: [SurveyResponse!]!
  findUniqueSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponse!
  ResponseCount: ResponseCount!
  getIssuesByStatus(resolved: String!): [String!]!
  findManyAnswers: [Answer!]!
  findUniqueAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): Answer!
  findManyOrgs: [Org!]!
  getSubOrgs(orgWhereUniqueInput: OrgWhereUniqueInput!): [Org!]!
  findUniqueOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): Org!
  findManyQuestions: [Question!]!
  getSubQuestions(surveyWhereUniqueInput: SurveyWhereUniqueInput!): [Question!]!
  findUniqueQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): Question!
  findUsersWithRole(role: String!): [User!]!
  getCommanders: [User!]!
  findUniqueUser(userWhereUniqueInput: UserWhereUniqueInput!): User!
  me: User!
  usernameOrEmailExists(usernameOrEmail: String!): Boolean!
}

input SurveyWhereUniqueInput {
  id: String
  questionsHash: String
}

input SurveyResponseWhereUniqueInput {
  id: String
}

input AnswerWhereUniqueInput {
  id: String
}

input OrgWhereUniqueInput {
  id: String
  name: String
}

input QuestionWhereUniqueInput {
  id: String
  prompt: String
}

input UserWhereUniqueInput {
  id: String
  email: String
}

type Mutation {
  createSurveyWithQuestions(questionPrompts: [String!]!, orgWhereUniqueInput: OrgWhereUniqueInput!): Survey!
  createSurvey(surveyCreateInput: SurveyCreateInput!): Survey!
  updateSurvey(SurveyWhereUniqueInput: SurveyWhereUniqueInput!, SurveyUpdateInput: SurveyUpdateInput!): Survey!
  deleteSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): Survey!
  createSurveyResponse(surveyResponseCreateInput: SurveyResponseCreateInput!): SurveyResponse!
  updateSurveyResponse(SurveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!, SurveyResponseUpdateInput: SurveyResponseUpdateInput!): SurveyResponse!
  deleteSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponse!
  createAnswer(answerCreateInput: AnswerCreateInput!): Answer!
  createOrg(orgCreateInput: OrgCreateInput!): Org!
  updateOrg(OrgWhereUniqueInput: OrgWhereUniqueInput!, OrgUpdateInput: OrgUpdateInput!): Org!
  deleteOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): Org!
  createQuestion(questionCreateInput: QuestionCreateInput!): Question!
  updateQuestion(QuestionWhereUniqueInput: QuestionWhereUniqueInput!, QuestionUpdateInput: QuestionUpdateInput!): Question!
  createUser(userCreateInput: UserCreateInput!): User!
  deleteUser(userWhereUniqueInput: UserWhereUniqueInput!): User
  login(loginUserInput: LoginUserInput!): Tokens!
  refreshTokens(refreshLoginInput: RefreshLoginInput!): Tokens!
}

input SurveyCreateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
  questionsHash: String
}

input OrgCreateNestedManyWithoutSurveysInput {
  connect: OrgWhereUniqueInput
}

input QuestionCreateNestedManyWithoutSurveysInput {
  connect: [QuestionWhereUniqueInput!]
}

input SurveyResponseCreateNestedManyWithoutSurveyInput {
  connect: SurveyResponseWhereUniqueInput
}

input SurveyUpdateInput {
  questions: QuestionUpdateManyWithoutSurveysInput
  surveyResponses: SurveyResponseUpdateManyWithoutSurveyInput
}

input QuestionUpdateManyWithoutSurveysInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutSurveysInput!]
}

input QuestionCreateOrConnectWithoutSurveysInput {
  where: QuestionWhereUniqueInput!
  create: QuestionCreateWithoutSurveysInput!
}

input QuestionCreateWithoutSurveysInput {
  answers: AnswerCreateNestedManyWithoutQuestionInput
  prompt: String!
}

input AnswerCreateNestedManyWithoutQuestionInput {
  connect: [AnswerWhereUniqueInput!]
}

input SurveyResponseUpdateManyWithoutSurveyInput {
  createMany: SurveyResponseCreateManySurveyInputEnvelope
}

input SurveyResponseCreateManySurveyInputEnvelope {
  data: [SurveyResponseCreateInput!]!
  skipDuplicates: Boolean
}

input SurveyResponseCreateInput {
  survey: SurveyCreateNestedOneWithoutSurveyResponsesInput!
  answers: AnswerCreateNestedManyWithoutSurveyResponseInput
  openedDate: DateTime
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input SurveyCreateNestedOneWithoutSurveyResponsesInput {
  connect: SurveyWhereUniqueInput
}

input AnswerCreateNestedManyWithoutSurveyResponseInput {
  connect: AnswerWhereUniqueInput
  create: AnswerCreateWithoutSurveyResponseInput
  createMany: AnswerCreateManySurveyResponseInputEnvelope
}

input AnswerCreateWithoutSurveyResponseInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  value: String!
}

input QuestionCreateNestedOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
}

input AnswerCreateManySurveyResponseInputEnvelope {
  data: [AnswerCreateManySurveyResponseInput!]!
  skipDuplicates: Boolean
}

input AnswerCreateManySurveyResponseInput {
  value: String!
  questionId: String!
}

input SurveyResponseUpdateInput {
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input AnswerCreateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput!
  value: String!
}

input SurveyResponseCreateNestedOneWithoutAnswersInput {
  connect: SurveyResponseWhereUniqueInput
}

input OrgCreateInput {
  orgTier: OrgTier!
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String!
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input UserCreateNestedManyWithoutOrgsInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedOneWithoutChildrenInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedManyWithoutParentInput {
  connect: OrgWhereUniqueInput
}

input SurveyCreateNestedManyWithoutOrgsInput {
  connect: SurveyWhereUniqueInput
}

input OrgUpdateInput {
  orgTier: OrgTier
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input QuestionCreateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String!
}

input SurveyCreateNestedManyWithoutQuestionsInput {
  connect: SurveyWhereUniqueInput
}

input QuestionUpdateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String
}

input UserCreateInput {
  role: Role!
  orgs: OrgCreateNestedManyWithoutUsersInput!
  email: String!
  password: String!
  grade: String
  firstName: String!
  lastName: String!
  enabled: Boolean
}

input OrgCreateNestedManyWithoutUsersInput {
  connect: OrgWhereUniqueInput
}

input LoginUserInput {
  username: String!
  password: String!
}

input RefreshLoginInput {
  refreshToken: String!
}
