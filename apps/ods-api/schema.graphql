# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerGQL {
  id: String!
  value: String!
  question: QuestionGQL!
  surveyResponse: SurveyResponseGQL!
}

type OrgGQL {
  orgTier: OrgTier!
  id: String!
  name: String!
  users: [UserGQL!]!
  children: [OrgGQL!]!
  parent: OrgGQL!
  surveys: [SurveyGQL!]!
}

enum OrgTier {
  WING
  GROUP
  SQUADRON
  OTHER
}

type QuestionGQL {
  id: String!
  prompt: String!
  answers: [AnswerGQL!]!
  surveys: [SurveyGQL!]!
}

type SurveyGQL {
  id: String!
  questionsHash: String
  orgs: [OrgGQL!]!
  questions: [QuestionGQL!]!
  surveyResponses: [SurveyResponseGQL!]!
}

type SurveyResponseGQL {
  id: String!
  openedDate: DateTime!
  closedDate: DateTime
  routeOutside: Boolean!
  resolution: String
  answers: [AnswerGQL!]!
  survey: SurveyGQL!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ResponseCount {
  unresolved: Float!
  overdue: Float!
  resolved: Float!
}

type UserGQL {
  role: Role!
  id: String!
  email: String!
  grade: String
  firstName: String!
  lastName: String!
  enabled: Boolean!
  orgs: [OrgGQL!]!
}

enum Role {
  ADMIN
  DEI
  EO
  CC
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type Query {
  findManySurveys: [SurveyGQL!]!
  findUniqueSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  findManySurveyResponses: [SurveyResponseGQL!]!
  findUniqueSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  ResponseCount: ResponseCount!
  getIssuesByStatus(resolved: Boolean!): [String!]!
  getSurveyResponseData(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  findManyAnswers: [AnswerGQL!]!
  findUniqueAnswer(answerWhereUniqueInput: AnswerWhereUniqueInput!): AnswerGQL!
  findManyOrgs: [OrgGQL!]!
  getSubOrgs(orgWhereUniqueInput: OrgWhereUniqueInput!): [OrgGQL!]!
  findUniqueOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  findManyQuestions: [QuestionGQL!]!
  getSubQuestions(surveyWhereUniqueInput: SurveyWhereUniqueInput!): [QuestionGQL!]!
  findUniqueQuestion(questionWhereUniqueInput: QuestionWhereUniqueInput!): QuestionGQL!
  findUsersWithRole(role: String!): [UserGQL!]!
  getCommanders: [UserGQL!]!
  findUniqueUser(userWhereUniqueInput: UserWhereUniqueInput!): UserGQL!
  me: UserGQL!
  usernameOrEmailExists(usernameOrEmail: String!): Boolean!
}

input SurveyWhereUniqueInput {
  id: String
  questionsHash: String
}

input SurveyResponseWhereUniqueInput {
  id: String
}

input AnswerWhereUniqueInput {
  id: String
}

input OrgWhereUniqueInput {
  id: String
  name: String
}

input QuestionWhereUniqueInput {
  id: String
  prompt: String
}

input UserWhereUniqueInput {
  id: String
  email: String
}

type Mutation {
  createSurveyWithQuestions(questionPrompts: [String!]!): SurveyGQL!
  createSurvey(surveyCreateInput: SurveyCreateInput!): SurveyGQL!
  updateSurvey(SurveyWhereUniqueInput: SurveyWhereUniqueInput!, SurveyUpdateInput: SurveyUpdateInput!): SurveyGQL!
  deleteSurvey(surveyWhereUniqueInput: SurveyWhereUniqueInput!): SurveyGQL!
  createSurveyResponse(surveyResponseCreateInput: SurveyResponseCreateInput!): SurveyResponseGQL!
  updateSurveyResponse(SurveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!, SurveyResponseUpdateInput: SurveyResponseUpdateInput!): SurveyResponseGQL!
  deleteSurveyResponse(surveyResponseWhereUniqueInput: SurveyResponseWhereUniqueInput!): SurveyResponseGQL!
  createAnswer(answerCreateInput: AnswerCreateInput!): AnswerGQL!
  createOrg(orgCreateInput: OrgCreateInput!): OrgGQL!
  updateOrg(OrgWhereUniqueInput: OrgWhereUniqueInput!, OrgUpdateInput: OrgUpdateInput!): OrgGQL!
  deleteOrg(orgWhereUniqueInput: OrgWhereUniqueInput!): OrgGQL!
  createQuestion(questionCreateInput: QuestionCreateInput!): QuestionGQL!
  updateQuestion(QuestionWhereUniqueInput: QuestionWhereUniqueInput!, QuestionUpdateInput: QuestionUpdateInput!): QuestionGQL!
  createUser(userCreateInput: UserCreateInput!): UserGQL!
  deleteUser(userWhereUniqueInput: UserWhereUniqueInput!): UserGQL!
  login(loginUserInput: LoginUserInput!): Tokens!
  refreshTokens(refreshLoginInput: RefreshLoginInput!): Tokens!
}

input SurveyCreateInput {
  orgs: OrgCreateNestedManyWithoutSurveysInput
  questions: QuestionCreateNestedManyWithoutSurveysInput
  surveyResponses: SurveyResponseCreateNestedManyWithoutSurveyInput
  questionsHash: String
}

input OrgCreateNestedManyWithoutSurveysInput {
  connect: OrgWhereUniqueInput
}

input QuestionCreateNestedManyWithoutSurveysInput {
  connect: [QuestionWhereUniqueInput!]
}

input SurveyResponseCreateNestedManyWithoutSurveyInput {
  connect: SurveyResponseWhereUniqueInput
}

input SurveyUpdateInput {
  questions: QuestionUpdateManyWithoutSurveysInput
  surveyResponses: SurveyResponseUpdateManyWithoutSurveyInput
}

input QuestionUpdateManyWithoutSurveysInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutSurveysInput!]
}

input QuestionCreateOrConnectWithoutSurveysInput {
  where: QuestionWhereUniqueInput!
  create: QuestionCreateWithoutSurveysInput!
}

input QuestionCreateWithoutSurveysInput {
  answers: AnswerCreateNestedManyWithoutQuestionInput
  prompt: String!
}

input AnswerCreateNestedManyWithoutQuestionInput {
  connect: [AnswerWhereUniqueInput!]
}

input SurveyResponseUpdateManyWithoutSurveyInput {
  createMany: SurveyResponseCreateManySurveyInputEnvelope
}

input SurveyResponseCreateManySurveyInputEnvelope {
  data: [SurveyResponseCreateInput!]!
  skipDuplicates: Boolean
}

input SurveyResponseCreateInput {
  survey: SurveyCreateNestedOneWithoutSurveyResponsesInput!
  answers: AnswerCreateNestedManyWithoutSurveyResponseInput
  openedDate: DateTime
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input SurveyCreateNestedOneWithoutSurveyResponsesInput {
  connect: SurveyWhereUniqueInput
}

input AnswerCreateNestedManyWithoutSurveyResponseInput {
  connect: AnswerWhereUniqueInput
  create: AnswerCreateWithoutSurveyResponseInput
  createMany: AnswerCreateManySurveyResponseInputEnvelope
}

input AnswerCreateWithoutSurveyResponseInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  value: String!
}

input QuestionCreateNestedOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
}

input AnswerCreateManySurveyResponseInputEnvelope {
  data: [AnswerCreateManySurveyResponseInput!]!
  skipDuplicates: Boolean
}

input AnswerCreateManySurveyResponseInput {
  value: String!
  questionId: String!
}

input SurveyResponseUpdateInput {
  closedDate: DateTime
  routeOutside: Boolean
  resolution: String
}

input AnswerCreateInput {
  question: QuestionCreateNestedOneWithoutAnswersInput!
  surveyResponse: SurveyResponseCreateNestedOneWithoutAnswersInput!
  value: String!
}

input SurveyResponseCreateNestedOneWithoutAnswersInput {
  connect: SurveyResponseWhereUniqueInput
}

input OrgCreateInput {
  orgTier: OrgTier!
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String!
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input UserCreateNestedManyWithoutOrgsInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedOneWithoutChildrenInput {
  connect: OrgWhereUniqueInput
}

input OrgCreateNestedManyWithoutParentInput {
  connect: OrgWhereUniqueInput
}

input SurveyCreateNestedManyWithoutOrgsInput {
  connect: SurveyWhereUniqueInput
}

input OrgUpdateInput {
  orgTier: OrgTier
  users: UserCreateNestedManyWithoutOrgsInput
  parent: OrgCreateNestedOneWithoutChildrenInput
  children: OrgCreateNestedManyWithoutParentInput
  name: String
  surveys: SurveyCreateNestedManyWithoutOrgsInput
}

input QuestionCreateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String!
}

input SurveyCreateNestedManyWithoutQuestionsInput {
  connect: SurveyWhereUniqueInput
}

input QuestionUpdateInput {
  surveys: SurveyCreateNestedManyWithoutQuestionsInput
  prompt: String
}

input UserCreateInput {
  role: Role!
  orgs: OrgCreateNestedManyWithoutUsersInput!
  email: String!
  password: String!
  grade: String
  firstName: String!
  lastName: String!
  enabled: Boolean
}

input OrgCreateNestedManyWithoutUsersInput {
  connect: OrgWhereUniqueInput
}

input LoginUserInput {
  username: String!
  password: String!
}

input RefreshLoginInput {
  refreshToken: String!
}