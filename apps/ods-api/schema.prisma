// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("NX_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/ods/client"
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  enabled          Boolean          @default(true)
  grade            String?
  firstName        String
  lastName         String
  role             Role
  refreshToken     RefreshToken?
  orgs             Org[]
  approvedRequests AccountRequest[] @relation(name: "ApprovedRequests") //requests this user approved
}

model AccountRequest {
  id         String   @id @default(uuid())
  email      String   @unique
  rank       String?
  password   String
  firstName  String
  lastName   String
  date       DateTime @default(now())
  role       Role
  orgs       Org[]
  //TODO comments  Comment[]
  approver   User?    @relation(name: "ApprovedRequests", fields: [approverId], references: [id]) //user that approved this request
  approverId String?
  denied     Boolean  @default(false)
}

model RefreshToken {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  isRevoked   Boolean  @default(false)
  issuedDate  DateTime @default(now())
  expiredDate DateTime
  hash        String
}

model Org {
  id              String           @id @default(uuid())
  name            String           @unique // Example "552 ACNS"
  orgTier         OrgTier
  users           User[]
  parentId        String? // a parent org can have many child orgs
  parent          Org?             @relation(name: "ParentChild", fields: [parentId], references: [id])
  children        Org[]            @relation(name: "ParentChild") // This is a self relation
  surveys         Survey[]
  accountRequests AccountRequest[]
}

model SurveyResponse {
  id           String    @id @default(uuid())
  survey       Survey    @relation(fields: [surveyId], references: [id])
  surveyId     String
  openedDate   DateTime  @default(now())
  closedDate   DateTime?
  answers      Answer[]
  routeOutside Boolean   @default(false)
  resolution   String?
}

model Answer {
  id               String         @id @default(uuid())
  value            String
  question         Question       @relation(fields: [questionId], references: [id])
  questionId       String
  surveyResponse   SurveyResponse @relation(fields: [surveyResponseId], references: [id])
  surveyResponseId String
}

model Survey {
  id              String           @id @default(uuid())
  orgs            Org[]
  questions       Question[]
  questionsHash   String?          @unique
  surveyResponses SurveyResponse[]
}

model Question {
  id      String   @id @default(uuid())
  prompt  String   @unique
  surveys Survey[]
  answers Answer[]
}

enum Role {
  ADMIN
  DEI // Diversity, Equity, Inclusion
  EO // Equal Opportunity
  CC // Commander
}

enum Spec {
  AD
  CIVILIAN
  CONTRACTOR
  RESERVE_GUARD
}

enum OrgTier {
  WING
  GROUP
  SQUADRON
  OTHER
}
