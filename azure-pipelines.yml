trigger:
  - master
pr:
  - master
  - dev

variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    NX_BRANCH: 'master'
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)

jobs:
  - job: master
    pool:
      name: Default
      demands:
        - agent.name -equals DOUP-DEVOPS
    condition: ne(variables['Build.Reason'], 'PullRequest')
    steps:
      - checkout: self
        clean: false
      - task: UseNode@1
        inputs:
          version: '16.13.x'
          checkLatest: true
        displayName: 'Install LTS of Node.js'
      - script: npm install --global yarn
      - script: yarn
      - script: yarn nx run waypoint-api:prisma-generate
      - script: npx nx affected --base=HEAD~1 --target=test --parallel

  - job: pr
    pool:
      name: Default
      demands:
        - agent.name -equals DOUP-DEVOPS
    condition: eq(variables['Build.Reason'], 'PullRequest')
    steps:
      - checkout: self
        clean: false
      - task: UseNode@1
        inputs:
          version: '16.13.x'
          checkLatest: true
        displayName: 'Install LTS of Node.js'
      - script: npm install -g yarn
        displayName: Install yarn
      - script: yarn audit
        displayName: Audit packages
      - script: yarn install --frozen-lockfile --prefer-offline
        displayName: Install dependencies
      - task: UseDotNet@2
        displayName: 'Use .NET Core 6.0 sdk'
        inputs:
          packageType: sdk
          version: 6.x
      - script: yarn nx run-many --target=prisma-generate --all=true --parallel=false
        displayName: Generate Prisma clients
      - script: npx nx affected --target=lint --base=origin/master --head=HEAD --parallel
        displayName: Run linter
      - script: npx nx affected --target=build --base=origin/master --head=HEAD --parallel
        displayName: Run tests
      - script: npx nx affected --target=test --base=origin/master --head=HEAD --codeCoverage=true --coverageReporters=cobertura --parallel
        displayName: Run tests
      - script: dotnet tool update -g dotnet-reportgenerator-globaltool
        continueOnError: true
        displayName: Install report generator
      - script: reportgenerator -reports:**/cobertura-coverage.xml -targetdir:./coverage/merged "-reporttypes:Cobertura"
        displayName: Create code coverage report
        continueOnError: true
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: './coverage/merged/Cobertura.xml'
